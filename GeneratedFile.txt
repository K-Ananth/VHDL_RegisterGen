---------------------- ( 15-03-2025 11:07 pm ) ----------------------

signal a_reg  : std_logic_vector(7 downto 0):=(others => '0');
signal a_rd   : std_logic:='0';
signal a_wr   : std_logic:='0';

signal b_reg  : std_logic_vector(31 downto 0):=(others => '0');
signal b_rd   : std_logic:='0';
signal b_wr   : std_logic:='0';

signal c_reg  : std_logic_vector(31 downto 0):=(others => '0');
signal c_rd   : std_logic:='0';
signal c_wr   : std_logic:='0';

signal d_reg  : std_logic_vector(31 downto 0):=(others => '0');
signal d_rd   : std_logic:='0';
signal d_wr   : std_logic:='0';

signal e_reg  : std_logic_vector(31 downto 0):=(others => '0');
signal e_rd   : std_logic:='0';
signal e_wr   : std_logic:='0';

signal f1_reg : std_logic_vector(11 downto 0):=(others => '0');
signal f1_rd  : std_logic:='0';
signal f1_wr  : std_logic:='0';

signal f2_reg : std_logic_vector(31 downto 0):=(others => '0');
signal f2_rd  : std_logic:='0';
signal f2_wr  : std_logic:='0';

------------------------------- Segments after begin -------------------------------

a_rd   <= '1' when eth_rden = '1' and eth_addr = x"1" else '0';
a_wr   <= '1' when eth_wren = '1' and eth_addr = x"1" else '0';

b_rd   <= '1' when eth_rden = '1' and eth_addr = x"2" else '0';
b_wr   <= '1' when eth_wren = '1' and eth_addr = x"2" else '0';

c_rd   <= '1' when eth_rden = '1' and eth_addr = x"3" else '0';
c_wr   <= '1' when eth_wren = '1' and eth_addr = x"3" else '0';

d_rd   <= '1' when eth_rden = '1' and eth_addr = x"4" else '0';
d_wr   <= '1' when eth_wren = '1' and eth_addr = x"4" else '0';

e_rd   <= '1' when eth_rden = '1' and eth_addr = x"5" else '0';
e_wr   <= '1' when eth_wren = '1' and eth_addr = x"5" else '0';

f1_rd  <= '1' when eth_rden = '1' and eth_addr = x"6" else '0';
f1_wr  <= '1' when eth_wren = '1' and eth_addr = x"6" else '0';

f2_rd  <= '1' when eth_rden = '1' and eth_addr = x"" else '0';
f2_wr  <= '1' when eth_wren = '1' and eth_addr = x"" else '0';

eth_rdo <= 
         a_reg  when a_rd   = '1' else 
         b_reg  when b_rd   = '1' else 
         c_reg  when c_rd   = '1' else 
         d_reg  when d_rd   = '1' else 
         e_reg  when e_rd   = '1' else 
         f1_reg  when f1_rd  = '1' else 
         f2_reg  when f2_rd  = '1' else 
      (others => '0');

eth_rdeo <= a_rd or b_rd or c_rd or d_rd or e_rd or f1_rd or f2_rd; 

process(eth_rst,eth_clk) 
begin
    if rising_edge(eth_clk) then
        if (eth_rst = '1') then
            a_reg <= x"000000aa";
        elsif(a_wr = '1') then
            a_reg <= eth_wrd(7 downto 0);
        end if;
    end if;
end process;

process(eth_rst,eth_clk) 
begin
    if rising_edge(eth_clk) then
        if (eth_rst = '1') then
            b_reg <= (others => '0');
        elsif(b_wr = '1') then
            b_reg <= eth_wrd;
        end if;
    end if;
end process;

process(eth_rst,eth_clk) 
begin
    if rising_edge(eth_clk) then
        if (eth_rst = '1') then
            c_reg <= x"00000bbb";
        elsif(c_wr = '1') then
            c_reg <= eth_wrd;
        end if;
    end if;
end process;

process(eth_rst,eth_clk) 
begin
    if rising_edge(eth_clk) then
        if (eth_rst = '1') then
            d_reg <= (others => '0');
        elsif(d_wr = '1') then
            d_reg <= eth_wrd;
        end if;
    end if;
end process;

process(eth_rst,eth_clk) 
begin
    if rising_edge(eth_clk) then
        if (eth_rst = '1') then
            e_reg <= (others => '0');
        elsif(e_wr = '1') then
            e_reg <= eth_wrd;
        end if;
    end if;
end process;

process(eth_rst,eth_clk) 
begin
    if rising_edge(eth_clk) then
        if (eth_rst = '1') then
            f1_reg <= (others => '0');
        elsif(f1_wr = '1') then
            f1_reg <= eth_wrd(11 downto 0);
        end if;
    end if;
end process;

process(eth_rst,eth_clk) 
begin
    if rising_edge(eth_clk) then
        if (eth_rst = '1') then
            f2_reg <= (others => '0');
        elsif(f2_wr = '1') then
            f2_reg <= eth_wrd;
        end if;
    end if;
end process;

